
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import { Loader2, AlertCircle, Brain } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/components/ui/sonner";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";

interface AISummaryProps {
  postContent: string;
}

const AISummary = ({ postContent }: AISummaryProps) => {
  const [summary, setSummary] = useState<string>("");
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const [hasError, setHasError] = useState(false);

  const generateSummary = async () => {
    // If already loaded, just toggle visibility
    if (summary) {
      setIsOpen(!isOpen);
      return;
    }

    try {
      setIsLoading(true);
      setHasError(false);
      
      // Make sure the postContent is not too long
      const truncatedContent = postContent.length > 10000 
        ? postContent.substring(0, 10000) + "..." 
        : postContent;
      
      const response = await supabase.functions.invoke("ai-helper", {
        body: {
          action: "summarize",
          content: truncatedContent
        }
      });

      if (!response.data) {
        console.error("Invalid response structure:", response);
        throw new Error("Failed to generate summary: Invalid response");
      }

      if (response.error) {
        console.error("Summary error:", response.error);
        throw new Error(response.error.message);
      }
      
      setSummary(response.data.result || "No summary available");
      setIsOpen(true);
    } catch (error: any) {
      console.error("Error generating summary:", error);
      setHasError(true);
      toast.error("Failed to generate summary. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="mb-6">
      <Collapsible open={isOpen} onOpenChange={setIsOpen}>
        <CollapsibleTrigger asChild>
          <Button
            variant="outline"
            size="sm"
            onClick={generateSummary}
            disabled={isLoading}
            className="mb-2 flex items-center gap-2 border-primary/20 hover:bg-primary/5"
          >
            {isLoading ? (
              <Loader2 className="h-4 w-4 animate-spin" />
            ) : (
              <Brain className="h-4 w-4" />
            )}
            {summary ? "Toggle AI Summary" : "ðŸ§  Summarize this post"}
          </Button>
        </CollapsibleTrigger>
        
        <CollapsibleContent>
          {hasError ? (
            <Alert variant="destructive" className="mb-4">
              <AlertCircle className="h-4 w-4" />
              <AlertTitle>Error</AlertTitle>
              <AlertDescription>
                Failed to generate summary. Please try again later.
              </AlertDescription>
            </Alert>
          ) : summary ? (
            <Alert className="mb-4 bg-primary/5 border-primary/20">
              <Brain className="h-4 w-4 text-primary" />
              <AlertTitle>AI Summary</AlertTitle>
              <AlertDescription className="whitespace-pre-line mt-2">
                {summary}
              </AlertDescription>
              <div className="mt-2 text-xs text-muted-foreground">
                Generated by AI - may not capture all nuances
              </div>
            </Alert>
          ) : null}
        </CollapsibleContent>
      </Collapsible>
    </div>
  );
};

export default AISummary;
